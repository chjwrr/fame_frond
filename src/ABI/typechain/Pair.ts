/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace GAMMPricing {
  export type PMMStateStruct = {
    i: BigNumberish;
    KB: BigNumberish;
    KQ: BigNumberish;
    B: BigNumberish;
    Q: BigNumberish;
    B0: BigNumberish;
    Q0: BigNumberish;
    R: BigNumberish;
  };

  export type PMMStateStructOutput = [
    i: bigint,
    KB: bigint,
    KQ: bigint,
    B: bigint,
    Q: bigint,
    B0: bigint,
    Q0: bigint,
    R: bigint
  ] & {
    i: bigint;
    KB: bigint;
    KQ: bigint;
    B: bigint;
    Q: bigint;
    B0: bigint;
    Q0: bigint;
    R: bigint;
  };
}

export interface PairInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "GGNPUpgradeable_init"
      | "PERMIT_TYPEHASH"
      | "_BASE_PRICE_CUMULATIVE_LAST_"
      | "_BASE_RESERVE_"
      | "_BASE_TARGET_"
      | "_BASE_TOKEN_"
      | "_BLOCK_TIMESTAMP_LAST_"
      | "_IS_OPEN_TWAP_"
      | "_IS_ORACLE_ENABLED"
      | "_I_"
      | "_KB_"
      | "_KQ_"
      | "_LP_FEE_RATE_"
      | "_MAINTAINER_"
      | "_MT_FEE_RATE_MODEL_"
      | "_NEW_OWNER_"
      | "_ORACLE_"
      | "_OWNER_"
      | "_PAUSER_"
      | "_QUOTE_RESERVE_"
      | "_QUOTE_TARGET_"
      | "_QUOTE_TOKEN_"
      | "_RState_"
      | "addressToShortString"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "buyShares"
      | "changeOracle"
      | "claimOwnership"
      | "correctRState"
      | "decimals"
      | "disableOracle"
      | "enableOracle"
      | "flashLoan"
      | "getBaseInput"
      | "getGAMMState"
      | "getGAMMStateForCall"
      | "getI"
      | "getMidPrice"
      | "getOraclePrice"
      | "getQuoteInput"
      | "getUserFeeRate"
      | "getVaultReserve"
      | "initOwner"
      | "name"
      | "nonces"
      | "pause"
      | "paused"
      | "permit"
      | "querySellBase"
      | "querySellQuote"
      | "sellBase"
      | "sellQuote"
      | "sellShares"
      | "symbol"
      | "sync"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "tuneParameters"
      | "tunePrice"
      | "unpause"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Burn"
      | "BuyShares"
      | "ChangeOracle"
      | "DisableOracle"
      | "EnableOracle"
      | "GASFlashLoan"
      | "GASSwap"
      | "LpFeeRateChange"
      | "Mint"
      | "OwnershipTransferPrepared"
      | "OwnershipTransferred"
      | "ParametersChange"
      | "PriceChange"
      | "RChange"
      | "SellShares"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GGNPUpgradeable_init",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_BASE_PRICE_CUMULATIVE_LAST_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_BASE_RESERVE_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_BASE_TARGET_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_BASE_TOKEN_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_BLOCK_TIMESTAMP_LAST_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_IS_OPEN_TWAP_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_IS_ORACLE_ENABLED",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_I_", values?: undefined): string;
  encodeFunctionData(functionFragment: "_KB_", values?: undefined): string;
  encodeFunctionData(functionFragment: "_KQ_", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_LP_FEE_RATE_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_MAINTAINER_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_MT_FEE_RATE_MODEL_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_NEW_OWNER_",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_ORACLE_", values?: undefined): string;
  encodeFunctionData(functionFragment: "_OWNER_", values?: undefined): string;
  encodeFunctionData(functionFragment: "_PAUSER_", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_QUOTE_RESERVE_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_QUOTE_TARGET_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_QUOTE_TOKEN_",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_RState_", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addressToShortString",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyShares",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "correctRState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disableOracle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enableOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseInput",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGAMMState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGAMMStateForCall",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMidPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteInput",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserFeeRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "querySellBase",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "querySellQuote",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellBase",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellQuote",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellShares",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tuneParameters",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tunePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GGNPUpgradeable_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_BASE_PRICE_CUMULATIVE_LAST_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_BASE_RESERVE_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_BASE_TARGET_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_BASE_TOKEN_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_BLOCK_TIMESTAMP_LAST_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_IS_OPEN_TWAP_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_IS_ORACLE_ENABLED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_I_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_KB_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_KQ_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_LP_FEE_RATE_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_MAINTAINER_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_MT_FEE_RATE_MODEL_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_NEW_OWNER_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_ORACLE_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_OWNER_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_PAUSER_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_QUOTE_RESERVE_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_QUOTE_TARGET_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_QUOTE_TOKEN_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_RState_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressToShortString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "correctRState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGAMMState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGAMMStateForCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMidPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "querySellBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "querySellQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellQuote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tuneParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tunePrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnEvent {
  export type InputTuple = [user: AddressLike, value: BigNumberish];
  export type OutputTuple = [user: string, value: bigint];
  export interface OutputObject {
    user: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuySharesEvent {
  export type InputTuple = [
    to: AddressLike,
    increaseShares: BigNumberish,
    totalShares: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    increaseShares: bigint,
    totalShares: bigint
  ];
  export interface OutputObject {
    to: string;
    increaseShares: bigint;
    totalShares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeOracleEvent {
  export type InputTuple = [oracle: AddressLike];
  export type OutputTuple = [oracle: string];
  export interface OutputObject {
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisableOracleEvent {
  export type InputTuple = [newI: BigNumberish];
  export type OutputTuple = [newI: bigint];
  export interface OutputObject {
    newI: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnableOracleEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GASFlashLoanEvent {
  export type InputTuple = [
    borrower: AddressLike,
    assetTo: AddressLike,
    baseAmount: BigNumberish,
    quoteAmount: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    assetTo: string,
    baseAmount: bigint,
    quoteAmount: bigint
  ];
  export interface OutputObject {
    borrower: string;
    assetTo: string;
    baseAmount: bigint;
    quoteAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GASSwapEvent {
  export type InputTuple = [
    fromToken: AddressLike,
    toToken: AddressLike,
    fromAmount: BigNumberish,
    toAmount: BigNumberish,
    trader: AddressLike,
    receiver: AddressLike
  ];
  export type OutputTuple = [
    fromToken: string,
    toToken: string,
    fromAmount: bigint,
    toAmount: bigint,
    trader: string,
    receiver: string
  ];
  export interface OutputObject {
    fromToken: string;
    toToken: string;
    fromAmount: bigint;
    toAmount: bigint;
    trader: string;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LpFeeRateChangeEvent {
  export type InputTuple = [newLpFeeRate: BigNumberish];
  export type OutputTuple = [newLpFeeRate: bigint];
  export interface OutputObject {
    newLpFeeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [user: AddressLike, value: BigNumberish];
  export type OutputTuple = [user: string, value: bigint];
  export interface OutputObject {
    user: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferPreparedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParametersChangeEvent {
  export type InputTuple = [
    oldLpFeeRate: BigNumberish,
    newLpFeeRate: BigNumberish,
    oldKB: BigNumberish,
    newKB: BigNumberish,
    oldKQ: BigNumberish,
    newKQ: BigNumberish,
    oldI: BigNumberish,
    newI: BigNumberish
  ];
  export type OutputTuple = [
    oldLpFeeRate: bigint,
    newLpFeeRate: bigint,
    oldKB: bigint,
    newKB: bigint,
    oldKQ: bigint,
    newKQ: bigint,
    oldI: bigint,
    newI: bigint
  ];
  export interface OutputObject {
    oldLpFeeRate: bigint;
    newLpFeeRate: bigint;
    oldKB: bigint;
    newKB: bigint;
    oldKQ: bigint;
    newKQ: bigint;
    oldI: bigint;
    newI: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceChangeEvent {
  export type InputTuple = [oldI: BigNumberish, newI: BigNumberish];
  export type OutputTuple = [oldI: bigint, newI: bigint];
  export interface OutputObject {
    oldI: bigint;
    newI: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RChangeEvent {
  export type InputTuple = [newRState: BigNumberish];
  export type OutputTuple = [newRState: bigint];
  export interface OutputObject {
    newRState: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellSharesEvent {
  export type InputTuple = [
    payer: AddressLike,
    to: AddressLike,
    decreaseShares: BigNumberish,
    totalShares: BigNumberish
  ];
  export type OutputTuple = [
    payer: string,
    to: string,
    decreaseShares: bigint,
    totalShares: bigint
  ];
  export interface OutputObject {
    payer: string;
    to: string;
    decreaseShares: bigint;
    totalShares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Pair extends BaseContract {
  connect(runner?: ContractRunner | null): Pair;
  waitForDeployment(): Promise<this>;

  interface: PairInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  GGNPUpgradeable_init: TypedContractMethod<
    [
      owner: AddressLike,
      maintainer: AddressLike,
      baseTokenAddress: AddressLike,
      quoteTokenAddress: AddressLike,
      oracle: AddressLike,
      lpFeeRate: BigNumberish,
      mtFeeRateModel: AddressLike,
      kb: BigNumberish,
      kq: BigNumberish,
      isOpenTWAP: boolean
    ],
    [void],
    "nonpayable"
  >;

  PERMIT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  _BASE_PRICE_CUMULATIVE_LAST_: TypedContractMethod<[], [bigint], "view">;

  _BASE_RESERVE_: TypedContractMethod<[], [bigint], "view">;

  _BASE_TARGET_: TypedContractMethod<[], [bigint], "view">;

  _BASE_TOKEN_: TypedContractMethod<[], [string], "view">;

  _BLOCK_TIMESTAMP_LAST_: TypedContractMethod<[], [bigint], "view">;

  _IS_OPEN_TWAP_: TypedContractMethod<[], [boolean], "view">;

  _IS_ORACLE_ENABLED: TypedContractMethod<[], [boolean], "view">;

  _I_: TypedContractMethod<[], [bigint], "view">;

  _KB_: TypedContractMethod<[], [bigint], "view">;

  _KQ_: TypedContractMethod<[], [bigint], "view">;

  _LP_FEE_RATE_: TypedContractMethod<[], [bigint], "view">;

  _MAINTAINER_: TypedContractMethod<[], [string], "view">;

  _MT_FEE_RATE_MODEL_: TypedContractMethod<[], [string], "view">;

  _NEW_OWNER_: TypedContractMethod<[], [string], "view">;

  _ORACLE_: TypedContractMethod<[], [string], "view">;

  _OWNER_: TypedContractMethod<[], [string], "view">;

  _PAUSER_: TypedContractMethod<[], [string], "view">;

  _QUOTE_RESERVE_: TypedContractMethod<[], [bigint], "view">;

  _QUOTE_TARGET_: TypedContractMethod<[], [bigint], "view">;

  _QUOTE_TOKEN_: TypedContractMethod<[], [string], "view">;

  _RState_: TypedContractMethod<[], [bigint], "view">;

  addressToShortString: TypedContractMethod<
    [_addr: AddressLike],
    [string],
    "view"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  buyShares: TypedContractMethod<
    [to: AddressLike],
    [
      [bigint, bigint, bigint] & {
        shares: bigint;
        baseInput: bigint;
        quoteInput: bigint;
      }
    ],
    "nonpayable"
  >;

  changeOracle: TypedContractMethod<
    [newOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  claimOwnership: TypedContractMethod<[], [void], "nonpayable">;

  correctRState: TypedContractMethod<[], [void], "nonpayable">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  disableOracle: TypedContractMethod<
    [newI: BigNumberish],
    [void],
    "nonpayable"
  >;

  enableOracle: TypedContractMethod<[], [void], "nonpayable">;

  flashLoan: TypedContractMethod<
    [
      baseAmount: BigNumberish,
      quoteAmount: BigNumberish,
      assetTo: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getBaseInput: TypedContractMethod<[], [bigint], "view">;

  getGAMMState: TypedContractMethod<
    [],
    [GAMMPricing.PMMStateStructOutput],
    "view"
  >;

  getGAMMStateForCall: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        i: bigint;
        KB: bigint;
        KQ: bigint;
        B: bigint;
        Q: bigint;
        B0: bigint;
        Q0: bigint;
        R: bigint;
      }
    ],
    "view"
  >;

  getI: TypedContractMethod<[], [bigint], "view">;

  getMidPrice: TypedContractMethod<[], [bigint], "view">;

  getOraclePrice: TypedContractMethod<[], [bigint], "view">;

  getQuoteInput: TypedContractMethod<[], [bigint], "view">;

  getUserFeeRate: TypedContractMethod<
    [user: AddressLike],
    [[bigint, bigint] & { lpFeeRate: bigint; mtFeeRate: bigint }],
    "view"
  >;

  getVaultReserve: TypedContractMethod<
    [],
    [[bigint, bigint] & { baseReserve: bigint; quoteReserve: bigint }],
    "view"
  >;

  initOwner: TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  querySellBase: TypedContractMethod<
    [trader: AddressLike, payBaseAmount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        receiveQuoteAmount: bigint;
        mtFee: bigint;
        newRState: bigint;
        newBaseTarget: bigint;
      }
    ],
    "view"
  >;

  querySellQuote: TypedContractMethod<
    [trader: AddressLike, payQuoteAmount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        receiveBaseAmount: bigint;
        mtFee: bigint;
        newRState: bigint;
        newQuoteTarget: bigint;
      }
    ],
    "view"
  >;

  sellBase: TypedContractMethod<[to: AddressLike], [bigint], "nonpayable">;

  sellQuote: TypedContractMethod<[to: AddressLike], [bigint], "nonpayable">;

  sellShares: TypedContractMethod<
    [
      shareAmount: BigNumberish,
      to: AddressLike,
      baseMinAmount: BigNumberish,
      quoteMinAmount: BigNumberish,
      data: BytesLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { baseAmount: bigint; quoteAmount: bigint }],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  sync: TypedContractMethod<[], [void], "nonpayable">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  tuneParameters: TypedContractMethod<
    [
      newLpFeeRate: BigNumberish,
      newI: BigNumberish,
      newKB: BigNumberish,
      newKQ: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  tunePrice: TypedContractMethod<[newI: BigNumberish], [boolean], "nonpayable">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GGNPUpgradeable_init"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      maintainer: AddressLike,
      baseTokenAddress: AddressLike,
      quoteTokenAddress: AddressLike,
      oracle: AddressLike,
      lpFeeRate: BigNumberish,
      mtFeeRateModel: AddressLike,
      kb: BigNumberish,
      kq: BigNumberish,
      isOpenTWAP: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "PERMIT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_BASE_PRICE_CUMULATIVE_LAST_"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_BASE_RESERVE_"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_BASE_TARGET_"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_BASE_TOKEN_"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_BLOCK_TIMESTAMP_LAST_"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_IS_OPEN_TWAP_"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "_IS_ORACLE_ENABLED"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "_I_"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_KB_"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_KQ_"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_LP_FEE_RATE_"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_MAINTAINER_"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_MT_FEE_RATE_MODEL_"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_NEW_OWNER_"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_ORACLE_"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_OWNER_"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_PAUSER_"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_QUOTE_RESERVE_"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_QUOTE_TARGET_"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_QUOTE_TOKEN_"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_RState_"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addressToShortString"
  ): TypedContractMethod<[_addr: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyShares"
  ): TypedContractMethod<
    [to: AddressLike],
    [
      [bigint, bigint, bigint] & {
        shares: bigint;
        baseInput: bigint;
        quoteInput: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeOracle"
  ): TypedContractMethod<[newOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "correctRState"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "disableOracle"
  ): TypedContractMethod<[newI: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableOracle"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "flashLoan"
  ): TypedContractMethod<
    [
      baseAmount: BigNumberish,
      quoteAmount: BigNumberish,
      assetTo: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBaseInput"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGAMMState"
  ): TypedContractMethod<[], [GAMMPricing.PMMStateStructOutput], "view">;
  getFunction(
    nameOrSignature: "getGAMMStateForCall"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        i: bigint;
        KB: bigint;
        KQ: bigint;
        B: bigint;
        Q: bigint;
        B0: bigint;
        Q0: bigint;
        R: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getI"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMidPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOraclePrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getQuoteInput"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserFeeRate"
  ): TypedContractMethod<
    [user: AddressLike],
    [[bigint, bigint] & { lpFeeRate: bigint; mtFeeRate: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVaultReserve"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { baseReserve: bigint; quoteReserve: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "initOwner"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "querySellBase"
  ): TypedContractMethod<
    [trader: AddressLike, payBaseAmount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        receiveQuoteAmount: bigint;
        mtFee: bigint;
        newRState: bigint;
        newBaseTarget: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "querySellQuote"
  ): TypedContractMethod<
    [trader: AddressLike, payQuoteAmount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        receiveBaseAmount: bigint;
        mtFee: bigint;
        newRState: bigint;
        newQuoteTarget: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "sellBase"
  ): TypedContractMethod<[to: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "sellQuote"
  ): TypedContractMethod<[to: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "sellShares"
  ): TypedContractMethod<
    [
      shareAmount: BigNumberish,
      to: AddressLike,
      baseMinAmount: BigNumberish,
      quoteMinAmount: BigNumberish,
      data: BytesLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { baseAmount: bigint; quoteAmount: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sync"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tuneParameters"
  ): TypedContractMethod<
    [
      newLpFeeRate: BigNumberish,
      newI: BigNumberish,
      newKB: BigNumberish,
      newKQ: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tunePrice"
  ): TypedContractMethod<[newI: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "BuyShares"
  ): TypedContractEvent<
    BuySharesEvent.InputTuple,
    BuySharesEvent.OutputTuple,
    BuySharesEvent.OutputObject
  >;
  getEvent(
    key: "ChangeOracle"
  ): TypedContractEvent<
    ChangeOracleEvent.InputTuple,
    ChangeOracleEvent.OutputTuple,
    ChangeOracleEvent.OutputObject
  >;
  getEvent(
    key: "DisableOracle"
  ): TypedContractEvent<
    DisableOracleEvent.InputTuple,
    DisableOracleEvent.OutputTuple,
    DisableOracleEvent.OutputObject
  >;
  getEvent(
    key: "EnableOracle"
  ): TypedContractEvent<
    EnableOracleEvent.InputTuple,
    EnableOracleEvent.OutputTuple,
    EnableOracleEvent.OutputObject
  >;
  getEvent(
    key: "GASFlashLoan"
  ): TypedContractEvent<
    GASFlashLoanEvent.InputTuple,
    GASFlashLoanEvent.OutputTuple,
    GASFlashLoanEvent.OutputObject
  >;
  getEvent(
    key: "GASSwap"
  ): TypedContractEvent<
    GASSwapEvent.InputTuple,
    GASSwapEvent.OutputTuple,
    GASSwapEvent.OutputObject
  >;
  getEvent(
    key: "LpFeeRateChange"
  ): TypedContractEvent<
    LpFeeRateChangeEvent.InputTuple,
    LpFeeRateChangeEvent.OutputTuple,
    LpFeeRateChangeEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferPrepared"
  ): TypedContractEvent<
    OwnershipTransferPreparedEvent.InputTuple,
    OwnershipTransferPreparedEvent.OutputTuple,
    OwnershipTransferPreparedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ParametersChange"
  ): TypedContractEvent<
    ParametersChangeEvent.InputTuple,
    ParametersChangeEvent.OutputTuple,
    ParametersChangeEvent.OutputObject
  >;
  getEvent(
    key: "PriceChange"
  ): TypedContractEvent<
    PriceChangeEvent.InputTuple,
    PriceChangeEvent.OutputTuple,
    PriceChangeEvent.OutputObject
  >;
  getEvent(
    key: "RChange"
  ): TypedContractEvent<
    RChangeEvent.InputTuple,
    RChangeEvent.OutputTuple,
    RChangeEvent.OutputObject
  >;
  getEvent(
    key: "SellShares"
  ): TypedContractEvent<
    SellSharesEvent.InputTuple,
    SellSharesEvent.OutputTuple,
    SellSharesEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Burn(address,uint256)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "BuyShares(address,uint256,uint256)": TypedContractEvent<
      BuySharesEvent.InputTuple,
      BuySharesEvent.OutputTuple,
      BuySharesEvent.OutputObject
    >;
    BuyShares: TypedContractEvent<
      BuySharesEvent.InputTuple,
      BuySharesEvent.OutputTuple,
      BuySharesEvent.OutputObject
    >;

    "ChangeOracle(address)": TypedContractEvent<
      ChangeOracleEvent.InputTuple,
      ChangeOracleEvent.OutputTuple,
      ChangeOracleEvent.OutputObject
    >;
    ChangeOracle: TypedContractEvent<
      ChangeOracleEvent.InputTuple,
      ChangeOracleEvent.OutputTuple,
      ChangeOracleEvent.OutputObject
    >;

    "DisableOracle(uint256)": TypedContractEvent<
      DisableOracleEvent.InputTuple,
      DisableOracleEvent.OutputTuple,
      DisableOracleEvent.OutputObject
    >;
    DisableOracle: TypedContractEvent<
      DisableOracleEvent.InputTuple,
      DisableOracleEvent.OutputTuple,
      DisableOracleEvent.OutputObject
    >;

    "EnableOracle()": TypedContractEvent<
      EnableOracleEvent.InputTuple,
      EnableOracleEvent.OutputTuple,
      EnableOracleEvent.OutputObject
    >;
    EnableOracle: TypedContractEvent<
      EnableOracleEvent.InputTuple,
      EnableOracleEvent.OutputTuple,
      EnableOracleEvent.OutputObject
    >;

    "GASFlashLoan(address,address,uint256,uint256)": TypedContractEvent<
      GASFlashLoanEvent.InputTuple,
      GASFlashLoanEvent.OutputTuple,
      GASFlashLoanEvent.OutputObject
    >;
    GASFlashLoan: TypedContractEvent<
      GASFlashLoanEvent.InputTuple,
      GASFlashLoanEvent.OutputTuple,
      GASFlashLoanEvent.OutputObject
    >;

    "GASSwap(address,address,uint256,uint256,address,address)": TypedContractEvent<
      GASSwapEvent.InputTuple,
      GASSwapEvent.OutputTuple,
      GASSwapEvent.OutputObject
    >;
    GASSwap: TypedContractEvent<
      GASSwapEvent.InputTuple,
      GASSwapEvent.OutputTuple,
      GASSwapEvent.OutputObject
    >;

    "LpFeeRateChange(uint256)": TypedContractEvent<
      LpFeeRateChangeEvent.InputTuple,
      LpFeeRateChangeEvent.OutputTuple,
      LpFeeRateChangeEvent.OutputObject
    >;
    LpFeeRateChange: TypedContractEvent<
      LpFeeRateChangeEvent.InputTuple,
      LpFeeRateChangeEvent.OutputTuple,
      LpFeeRateChangeEvent.OutputObject
    >;

    "Mint(address,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "OwnershipTransferPrepared(address,address)": TypedContractEvent<
      OwnershipTransferPreparedEvent.InputTuple,
      OwnershipTransferPreparedEvent.OutputTuple,
      OwnershipTransferPreparedEvent.OutputObject
    >;
    OwnershipTransferPrepared: TypedContractEvent<
      OwnershipTransferPreparedEvent.InputTuple,
      OwnershipTransferPreparedEvent.OutputTuple,
      OwnershipTransferPreparedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ParametersChange(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ParametersChangeEvent.InputTuple,
      ParametersChangeEvent.OutputTuple,
      ParametersChangeEvent.OutputObject
    >;
    ParametersChange: TypedContractEvent<
      ParametersChangeEvent.InputTuple,
      ParametersChangeEvent.OutputTuple,
      ParametersChangeEvent.OutputObject
    >;

    "PriceChange(uint256,uint256)": TypedContractEvent<
      PriceChangeEvent.InputTuple,
      PriceChangeEvent.OutputTuple,
      PriceChangeEvent.OutputObject
    >;
    PriceChange: TypedContractEvent<
      PriceChangeEvent.InputTuple,
      PriceChangeEvent.OutputTuple,
      PriceChangeEvent.OutputObject
    >;

    "RChange(uint8)": TypedContractEvent<
      RChangeEvent.InputTuple,
      RChangeEvent.OutputTuple,
      RChangeEvent.OutputObject
    >;
    RChange: TypedContractEvent<
      RChangeEvent.InputTuple,
      RChangeEvent.OutputTuple,
      RChangeEvent.OutputObject
    >;

    "SellShares(address,address,uint256,uint256)": TypedContractEvent<
      SellSharesEvent.InputTuple,
      SellSharesEvent.OutputTuple,
      SellSharesEvent.OutputObject
    >;
    SellShares: TypedContractEvent<
      SellSharesEvent.InputTuple,
      SellSharesEvent.OutputTuple,
      SellSharesEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
