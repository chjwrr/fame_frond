/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Getter {
  export type TradeInfoStruct = {
    perPrice: BigNumberish;
    price: BigNumberish;
    priceAfterFee: BigNumberish;
  };

  export type TradeInfoStructOutput = [
    perPrice: bigint,
    price: bigint,
    priceAfterFee: bigint
  ] & { perPrice: bigint; price: bigint; priceAfterFee: bigint };

  export type SubjectTradeUserInfoStruct = {
    supply: BigNumberish;
    bal: BigNumberish;
    tvl: BigNumberish;
    mc: BigNumberish;
    subjectIncome: BigNumberish;
    buy: Getter.TradeInfoStruct;
    sell: Getter.TradeInfoStruct;
    ethBalance: BigNumberish;
    ethInUsd: BigNumberish;
  };

  export type SubjectTradeUserInfoStructOutput = [
    supply: bigint,
    bal: bigint,
    tvl: bigint,
    mc: bigint,
    subjectIncome: bigint,
    buy: Getter.TradeInfoStructOutput,
    sell: Getter.TradeInfoStructOutput,
    ethBalance: bigint,
    ethInUsd: bigint
  ] & {
    supply: bigint;
    bal: bigint;
    tvl: bigint;
    mc: bigint;
    subjectIncome: bigint;
    buy: Getter.TradeInfoStructOutput;
    sell: Getter.TradeInfoStructOutput;
    ethBalance: bigint;
    ethInUsd: bigint;
  };

  export type SubjectsUserInfoStruct = {
    price: BigNumberish;
    bal: BigNumberish;
    supply: BigNumberish;
    tvl: BigNumberish;
    mc: BigNumberish;
    subjectIncome: BigNumberish;
  };

  export type SubjectsUserInfoStructOutput = [
    price: bigint,
    bal: bigint,
    supply: bigint,
    tvl: bigint,
    mc: bigint,
    subjectIncome: bigint
  ] & {
    price: bigint;
    bal: bigint;
    supply: bigint;
    tvl: bigint;
    mc: bigint;
    subjectIncome: bigint;
  };

  export type ProfolioInfoStruct = {
    income: IFame.IncomeDataStruct;
    totalValueInEth: BigNumberish;
  };

  export type ProfolioInfoStructOutput = [
    income: IFame.IncomeDataStructOutput,
    totalValueInEth: bigint
  ] & { income: IFame.IncomeDataStructOutput; totalValueInEth: bigint };
}

export declare namespace IFame {
  export type IncomeDataStruct = {
    referralIncome: BigNumberish;
    dividendIncome: BigNumberish;
    pendingDividendIncome: BigNumberish;
    subjectIncome: BigNumberish;
  };

  export type IncomeDataStructOutput = [
    referralIncome: bigint,
    dividendIncome: bigint,
    pendingDividendIncome: bigint,
    subjectIncome: bigint
  ] & {
    referralIncome: bigint;
    dividendIncome: bigint;
    pendingDividendIncome: bigint;
    subjectIncome: bigint;
  };
}

export interface GetterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "aggregator"
      | "fame"
      | "getSubjectTradeUserInfo"
      | "getSubjectsUserInfo"
      | "getUserProfolio"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aggregator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSubjectTradeUserInfo",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubjectsUserInfo",
    values: [BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserProfolio",
    values: [BigNumberish[], AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "aggregator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubjectTradeUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubjectsUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserProfolio",
    data: BytesLike
  ): Result;
}

export interface Getter extends BaseContract {
  connect(runner?: ContractRunner | null): Getter;
  waitForDeployment(): Promise<this>;

  interface: GetterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  aggregator: TypedContractMethod<[], [string], "view">;

  fame: TypedContractMethod<[], [string], "view">;

  getSubjectTradeUserInfo: TypedContractMethod<
    [
      subjectId: BigNumberish,
      user: AddressLike,
      buyAmt: BigNumberish,
      sellAmt: BigNumberish
    ],
    [Getter.SubjectTradeUserInfoStructOutput],
    "view"
  >;

  getSubjectsUserInfo: TypedContractMethod<
    [subjectIds: BigNumberish[], user: AddressLike],
    [Getter.SubjectsUserInfoStructOutput[]],
    "view"
  >;

  getUserProfolio: TypedContractMethod<
    [subjectIds: BigNumberish[], user: AddressLike],
    [Getter.ProfolioInfoStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "aggregator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fame"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSubjectTradeUserInfo"
  ): TypedContractMethod<
    [
      subjectId: BigNumberish,
      user: AddressLike,
      buyAmt: BigNumberish,
      sellAmt: BigNumberish
    ],
    [Getter.SubjectTradeUserInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubjectsUserInfo"
  ): TypedContractMethod<
    [subjectIds: BigNumberish[], user: AddressLike],
    [Getter.SubjectsUserInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserProfolio"
  ): TypedContractMethod<
    [subjectIds: BigNumberish[], user: AddressLike],
    [Getter.ProfolioInfoStructOutput],
    "view"
  >;

  filters: {};
}
